stages:
  - build
  - deploy

build:
  stage: build
  image: node:20-bullseye
  tags:
    - trainer
  script:
    - echo "üöÄ Starting build process for application..."
    - apt-get update -qq && apt-get install -y -qq zip build-essential python3
    
    # Ensure LightningCSS is completely disabled - s·ª≠ d·ª•ng nhi·ªÅu c√°ch kh√°c nhau
    - export NEXT_DISABLE_LIGHTNINGCSS=1
    - export NODE_OPTIONS="--no-experimental-fetch --max-old-space-size=4096"
    
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng tr·ª±c ti·∫øp cho Next.js
    - echo "üì¶ Installing dependencies..."
    - npm ci --legacy-peer-deps
    
    # Th√™m c·∫•u h√¨nh ƒë·ªÉ t·∫Øt LightningCSS trong next.config.js n·∫øu c·∫ßn
    - |
      if [ -f next.config.js ]; then
        echo "Backing up original next.config.js..."
        cp next.config.js next.config.js.bak
        
        echo "Updating next.config.js to disable LightningCSS..."
        cat > temp_script.js << 'EOF'
        const fs = require('fs');
        const config = require('./next.config.js');
        
        // Ensure config has experimental property
        if (!config.experimental) {
          config.experimental = {};
        }
        
        // Disable LightningCSS explicitly
        config.experimental.swcMinify = true;
        config.experimental.optimizeCss = false;
        config.experimental.nextScriptWorkers = false;
        
        if (config.webpack) {
          const originalWebpack = config.webpack;
          config.webpack = (webpackConfig, options) => {
            let newConfig = originalWebpack(webpackConfig, options);
            return newConfig;
          };
        } else {
          config.webpack = (webpackConfig, options) => {
            return webpackConfig;
          };
        }
        
        fs.writeFileSync('next.config.js', `module.exports = ${JSON.stringify(config, null, 2)}`);
        EOF
        
        node temp_script.js
        echo "Updated next.config.js content:"
        cat next.config.js
      else
        echo "No next.config.js found, creating one to disable LightningCSS..."
        echo "module.exports = { experimental: { swcMinify: true, optimizeCss: false } };" > next.config.js
      fi
    
    - echo "üîß Configuring environment..."
    - echo "$STAGING_ENV" > .env
    - cat .env
    
    - echo "üèóÔ∏è Building application..."
    # Force clean build
    - rm -rf .next
    - NEXT_DISABLE_LIGHTNINGCSS=1 NODE_OPTIONS="--no-experimental-fetch --max-old-space-size=4096" npm run build
    
    - echo "üìÇ Creating deployment package..."
    # Ki·ªÉm tra th∆∞ m·ª•c ƒë·∫ßu ra ch√≠nh x√°c
    - |
      if [ -d "dist" ]; then
        cd dist
        zip -r ../deploy.zip .
        cd ..
      elif [ -d ".next" ]; then
        # N·∫øu s·ª≠ d·ª•ng th∆∞ m·ª•c .next l√†m th∆∞ m·ª•c ƒë·∫ßu ra
        cd .next
        zip -r ../deploy.zip .
        cd ..
      elif [ -d "out" ]; then
        # N·∫øu s·ª≠ d·ª•ng export trong Next.js
        cd out
        zip -r ../deploy.zip .
        cd ..
      else
        echo "‚ùå Could not find output directory (dist, .next, or out)!"
        echo "Current directory structure:"
        ls -la
        exit 1
      fi
    
    - echo "‚úÖ Build completed successfully!"
  artifacts:
    paths:
      - deploy.zip
    expire_in: 1 week
  only:
    - staging
  cache:
    paths:
      - node_modules/
    key: ${CI_COMMIT_REF_SLUG}

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  tags:
    - trainer
  script:
    - echo "üåê Starting deployment to AWS Amplify..."
    - echo "üîç Checking environment variables..."
    - |
      if [ -z "$AWS_ACCESS_KEY_ID" ]; then
        echo "‚ùå ERROR: AWS_ACCESS_KEY_ID is not set!"
        exit 1
      fi
      if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
        echo "‚ùå ERROR: AWS_SECRET_ACCESS_KEY is not set!"
        exit 1
      fi
      if [ -z "$STAGING_AWS_REGION" ]; then
        echo "‚ùå ERROR: STAGING_AWS_REGION is not set!"
        exit 1
      fi
      if [ -z "$STAGING_AMPLIFY_APP_ID" ]; then
        echo "‚ùå ERROR: STAGING_AMPLIFY_APP_ID is not set!"
        exit 1
      fi
      if [ -z "$STAGING_BRANCH" ]; then
        echo "‚ùå ERROR: STAGING_BRANCH is not set!"
        exit 1
      fi
    
    - echo "üîë Configuring AWS credentials..."
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - echo "‚öôÔ∏è Configuring AWS region to $STAGING_AWS_REGION..."
    - aws configure set region "$STAGING_AWS_REGION"
    
    - echo "üîç Verifying AWS authentication..."
    - aws sts get-caller-identity
    
    - echo "üìã Checking deployment file..."
    - ls -la deploy.zip
    
    - echo "üì§ Deploying application to Amplify..."
    - |
      DEPLOY_RESULT=$(aws amplify start-deployment --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --zip-file fileb://deploy.zip)
      echo "$DEPLOY_RESULT"
      
      # Extract job ID for better tracking
      JOB_ID=$(echo "$DEPLOY_RESULT" | grep -o '"jobId": "[^"]*' | cut -d'"' -f4)
      if [ -n "$JOB_ID" ]; then
        echo "üìù Deployment job ID: $JOB_ID"
      fi
    
    - echo "üîé Checking deployment status..."
    - sleep 10
    - aws amplify list-jobs --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --max-results 3
    
    - echo "üéâ Deployment process completed successfully!"
  only:
    - staging
  dependencies:
    - build
  environment:
    name: staging
    url: https://staging.d2gkzv5wx7qsyt.amplifyapp.com