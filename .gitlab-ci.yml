stages:
  - build
  - deploy

build:
  stage: build
  image: node:20-bullseye
  tags:
    - trainer
  script:
    - echo "üöÄ Starting build process for application..."
    - apt-get update -qq && apt-get install -y -qq zip build-essential python3
    
    # Ensure LightningCSS is completely disabled - s·ª≠ d·ª•ng nhi·ªÅu c√°ch kh√°c nhau
    - |
      export NEXT_DISABLE_LIGHTNINGCSS=1
      export NODE_OPTIONS="--no-experimental-fetch --max-old-space-size=4096"
      # Th√™m c√°c c√†i ƒë·∫∑t ƒë·∫∑c bi·ªát ƒë·ªÉ t·∫Øt ho√†n to√†n c√°c t√≠nh nƒÉng th·ª≠ nghi·ªám
      export NEXT_TELEMETRY_DISABLED=1
      export NEXT_MINIMAL=1
    
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng tr·ª±c ti·∫øp cho Next.js
    - echo "üì¶ Installing dependencies..."
    - npm ci --legacy-peer-deps
    
    # ƒêi·ªÅu ch·ªânh c·∫•u h√¨nh Next.js ƒë·ªÉ t·∫Øt LightningCSS
    - echo "üìÑ Ki·ªÉm tra c·∫•u h√¨nh Next.js..."
    - |
      if [ -f next.config.ts ]; then
        echo "‚úÖ T√¨m th·∫•y file next.config.ts, b·ªè qua t·∫°o file c·∫•u h√¨nh"
      elif [ -f next.config.js ]; then
        echo "‚úÖ T√¨m th·∫•y file next.config.js, ƒë·∫£m b·∫£o LightningCSS b·ªã t·∫Øt"
        echo "const config = require('./next.config.js');
        config.experimental = config.experimental || {};
        config.experimental.useLightningcss = false;
        config.experimental.forceSwcTransforms = true;
        module.exports = config;" > update-config.js
        node update-config.js
      else
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh Next.js, t·∫°o file m·ªõi..."
        echo "/** @type {import('next').NextConfig} */
        const nextConfig = {
          output: 'export',
          distDir: 'dist',
          experimental: {
            forceSwcTransforms: true,
            useLightningcss: false,
          },
          typescript: {
            ignoreBuildErrors: true,
          },
          eslint: {
            ignoreDuringBuilds: true,
          },
        };
        
        module.exports = nextConfig;" > next.config.js
      fi
    
    - echo "üîß Configuring environment..."
    - echo "$STAGING_ENV" > .env
    - cat .env
    
    - echo "üèóÔ∏è Building application..."
    # Force clean build
    - rm -rf .next dist out
    - |
      echo "üí° Th·ª±c hi·ªán build v·ªõi t·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ c·∫•u h√¨nh..."
      NEXT_DISABLE_LIGHTNINGCSS=1 \
      NODE_OPTIONS="--no-experimental-fetch --max-old-space-size=4096" \
      NEXT_TELEMETRY_DISABLED=1 \
      NEXT_MINIMAL=1 \
      npm run build
      
      # Ki·ªÉm tra k·∫øt qu·∫£ build
      BUILD_STATUS=$?
      if [ $BUILD_STATUS -ne 0 ]; then
        echo "‚ùå L·ªói khi build! ƒêang th·ª≠ v·ªõi th√¥ng s·ªë thay th·∫ø..."
        
        echo "üí° Th·ª≠ build v·ªõi --openssl-legacy-provider..."
        NEXT_DISABLE_LIGHTNINGCSS=1 \
        NODE_OPTIONS="--no-experimental-fetch --max-old-space-size=4096 --openssl-legacy-provider" \
        npm run build
        
        # Ki·ªÉm tra l·∫°i k·∫øt qu·∫£ build
        BUILD_STATUS=$?
        if [ $BUILD_STATUS -ne 0 ]; then
          echo "‚ùå Build v·∫´n th·∫•t b·∫°i! Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
          exit 1
        fi
      fi
    
    - echo "üìÇ Creating deployment package..."
    # Ki·ªÉm tra th∆∞ m·ª•c ƒë·∫ßu ra ch√≠nh x√°c d·ª±a tr√™n c·∫•u h√¨nh next.config.ts
    - |
      OUTPUT_DIR="dist"  # M·∫∑c ƒë·ªãnh theo next.config.ts
      
      if [ -d "$OUTPUT_DIR" ]; then
        echo "üì¶ ƒê√≥ng g√≥i th∆∞ m·ª•c $OUTPUT_DIR..."
        cd $OUTPUT_DIR
        zip -r ../deploy.zip .
        cd ..
      else
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c $OUTPUT_DIR! T√¨m ki·∫øm th∆∞ m·ª•c thay th·∫ø..."
        if [ -d ".next" ]; then
          echo "üì¶ ƒê√≥ng g√≥i th∆∞ m·ª•c .next..."
          cd .next
          zip -r ../deploy.zip .
          cd ..
        elif [ -d "out" ]; then
          echo "üì¶ ƒê√≥ng g√≥i th∆∞ m·ª•c out..."
          cd out
          zip -r ../deploy.zip .
          cd ..
        else
          echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ƒë·∫ßu ra n√†o (dist, .next, ho·∫∑c out)!"
          echo "C·∫•u tr√∫c th∆∞ m·ª•c hi·ªán t·∫°i:"
          ls -la
          
          echo "ƒêang t·∫°o g√≥i t·ª´ c√°c t·ªáp hi·ªán c√≥..."
          zip -r deploy.zip . -x "node_modules/*" -x ".git/*"
        fi
      fi
    
    - echo "‚úÖ Build completed successfully!"
  artifacts:
    paths:
      - deploy.zip
    expire_in: 1 week
  only:
    - staging
  cache:
    paths:
      - node_modules/
    key: ${CI_COMMIT_REF_SLUG}

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  tags:
    - trainer
  script:
    - echo "üåê Starting deployment to AWS Amplify..."
    - echo "üîç Checking environment variables..."
    - |
      if [ -z "$AWS_ACCESS_KEY_ID" ]; then
        echo "‚ùå ERROR: AWS_ACCESS_KEY_ID is not set!"
        exit 1
      fi
      if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
        echo "‚ùå ERROR: AWS_SECRET_ACCESS_KEY is not set!"
        exit 1
      fi
      if [ -z "$STAGING_AWS_REGION" ]; then
        echo "‚ùå ERROR: STAGING_AWS_REGION is not set!"
        exit 1
      fi
      if [ -z "$STAGING_AMPLIFY_APP_ID" ]; then
        echo "‚ùå ERROR: STAGING_AMPLIFY_APP_ID is not set!"
        exit 1
      fi
      if [ -z "$STAGING_BRANCH" ]; then
        echo "‚ùå ERROR: STAGING_BRANCH is not set!"
        exit 1
      fi
    
    - echo "üîë Configuring AWS credentials..."
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - echo "‚öôÔ∏è Configuring AWS region to $STAGING_AWS_REGION..."
    - aws configure set region "$STAGING_AWS_REGION"
    
    - echo "üîç Verifying AWS authentication..."
    - aws sts get-caller-identity
    
    - echo "üìã Checking deployment file..."
    - ls -la deploy.zip
    
    - echo "üì§ Deploying application to Amplify..."
    - |
      DEPLOY_RESULT=$(aws amplify start-deployment --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --zip-file fileb://deploy.zip)
      echo "$DEPLOY_RESULT"
      
      # Extract job ID for better tracking
      JOB_ID=$(echo "$DEPLOY_RESULT" | grep -o '"jobId": "[^"]*' | cut -d'"' -f4)
      if [ -n "$JOB_ID" ]; then
        echo "üìù Deployment job ID: $JOB_ID"
      fi
    
    - echo "üîé Checking deployment status..."
    - sleep 10
    - aws amplify list-jobs --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --max-results 3
    
    - echo "üéâ Deployment process completed successfully!"
  only:
    - staging
  dependencies:
    - build
  environment:
    name: staging
    url: https://staging.d2gkzv5wx7qsyt.amplifyapp.com