stages:
  - build
  - deploy

build:
  stage: build
  image: node:20-bullseye
  tags:
    - trainer
  script:
    - echo "üöÄ Starting build process..."
    - apt-get update -qq && apt-get install -y -qq zip
    
    # C√†i ƒë·∫∑t dependencies v·ªõi c√°ch ti·∫øp c·∫≠n ƒë·ªÉ gi·∫£i quy·∫øt xung ƒë·ªôt React 19
    - echo "üì¶ Installing dependencies..."
    - |
      # T·∫°o .npmrc ƒë·ªÉ b·ªè qua ki·ªÉm tra peer dependencies
      echo "legacy-peer-deps=true" > .npmrc
      echo "strict-peer-dependencies=false" >> .npmrc
      
      # Ki·ªÉm tra phi√™n b·∫£n React trong package.json
      REACT_VERSION=$(node -e "try { const pkg = require('./package.json'); console.log(pkg.dependencies.react || 'kh√¥ng c√≥'); } catch (e) { console.log('l·ªói ƒë·ªçc package.json'); }")
      echo "Phi√™n b·∫£n React trong package.json: $REACT_VERSION"
      
      # C√†i ƒë·∫∑t React Day Picker v·ªõi phi√™n b·∫£n ph√π h·ª£p
      npm install react-day-picker@8.10.1 --ignore-scripts
      
      # S·ª≠ d·ª•ng npm install v·ªõi --force v√† --ignore-scripts
      echo "C√†i ƒë·∫∑t t·∫•t c·∫£ dependencies v·ªõi --force v√† --ignore-scripts"
      npm install --force --ignore-scripts
      
      # V√° react-day-picker ƒë·ªÉ ch·∫•p nh·∫≠n React 19
      echo "V√° file node_modules/react-day-picker/package.json ƒë·ªÉ ch·∫•p nh·∫≠n React 19"
      node -e "
        const fs = require('fs');
        try {
          const packagePath = './node_modules/react-day-picker/package.json';
          let pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
          if (pkg.peerDependencies && pkg.peerDependencies.react) {
            pkg.peerDependencies.react = '^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0';
            fs.writeFileSync(packagePath, JSON.stringify(pkg, null, 2));
            console.log('ƒê√£ v√° th√†nh c√¥ng react-day-picker ƒë·ªÉ ch·∫•p nh·∫≠n React 19');
          }
        } catch (error) {
          console.error('L·ªói khi v√° file:', error);
        }
      "
    
    # Bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng ƒë·ªÉ t·∫Øt LightningCSS
    - export NEXT_DISABLE_LIGHTNINGCSS=1
    - export NODE_OPTIONS="--max-old-space-size=4096"
    - export NODE_ENV=production
    
    # T·∫°o file .env t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    - echo "üîß Configuring environment..."
    - echo "$STAGING_ENV" > .env
    - cat .env
    
    # S·ª≠ d·ª•ng file next.config.ts hi·ªán c√≥ - kh√¥ng t·∫°o file m·ªõi
    
    # Build ·ª©ng d·ª•ng
    - npm run build
    
    # T·∫°o file zip
    - cd dist
    - zip -r ../deploy.zip .
    - cd ..
  artifacts:
    paths:
      - deploy.zip
  only:
    - staging

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  tags:
    - trainer
  script:
    - echo "üåê Starting deployment to AWS Amplify..."
    
    # C·∫•u h√¨nh AWS
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set region "$STAGING_AWS_REGION"
    
    # Ki·ªÉm tra x√°c th·ª±c
    - aws sts get-caller-identity
    
    # Deploy l√™n Amplify
    - aws amplify start-deployment --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --zip-file fileb://deploy.zip
    
    # Ki·ªÉm tra tr·∫°ng th√°i
    - sleep 5
    - aws amplify list-jobs --app-id "$STAGING_AMPLIFY_APP_ID" --branch-name "$STAGING_BRANCH" --max-results 1
  only:
    - staging
  dependencies:
    - build